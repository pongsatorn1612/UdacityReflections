When would you want to use a remote repository rather than keeping all your work local?

- When I have to work with other people or what to do it remotely everywhere though internet.

git remote (-v)-> check special stage refer to repos at Gidhub (URL info).
git remote add <remote name> <URL of Github repos> -> creat new remote and 
                  link it to Github repos.
git push <remote> <branch> -> send commits from branch@local to remote@Github.
git pull <remote> <branch@Github> -> copy commits from branch@Github contain in 
                  remote repos to local current branch@local

______________________________________________________________________________________________

Why might you want to always pull changes manually rather than having 
Git automatically stay up-to-date with your remote repository?

- When work with other people, they push something to GitHub that
can mess you work up. So, to prevent unwanted change on the local 
work, manually pull is a great idea.


_________________________________________________________________________________--

Describe the differences between forks, clones, and branches. 
When would you use one instead of another?

- forks is clone on GitHub only
  clones copy the repos from Git to Local or Local to another location
  branches is path of commits

fork button on GitHub -> Clone other people repos into our account with credit?

____________________________________________________________________________________

What is the benefit of having a copy of the last known state 
of the remote stored locally?

- For the next pull or push, git will know about conflicts and updates

Key term: fast-forward merge is moving the rebel that points to old commit(ancestor)
          to the new commit of desire

git fetch -> update origin/master, which refers to master branch on Github, to match 
             with master branch on GitHub. It creates new bracnh in Local
git pull -> with fetch and merge master@Github to master@local if out of syn

___________________________________________________________________________________

How would you collaborate without using Git or GitHub? What would be easier, 
and what would be harder?

- Git help keeps history in a organize way GitHub makes it easiler to coop.
But for a small level without Git and GitHub should be find and might easiler
because we dont have to learn a lot of new concept of Git And GitHub

Note: pull request is a merge request to the owner of repos
      Owner can review, sender can fix so convinent;)
      To update pull request, have to push the same branch
______________________________________________________________________________________

When would you want to make changes in a separate branch 
rather than directly in master? What benefits does each approach have?

- Make direct change is easiler, but can cause a mess and shutdown 
a project. So to be safe and sound working on sub branch is saffer.

______________________________________________________________________________
